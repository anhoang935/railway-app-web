@startuml Railway Management System
left to right direction

' Enhanced styling for better readability
skinparam class {
  BackgroundColor #E8F4FD
  BorderColor #4A90E2
  ArrowColor #4A90E2
  FontColor #2C3E50
  HeaderBackgroundColor #4A90E2
  HeaderFontColor #FFFFFF
}

skinparam note {
  BackgroundColor #FFF3CD
  BorderColor #856404
  FontColor #856404
}

skinparam packageStyle rectangle
skinparam padding 5
skinparam roundCorner 8
skinparam defaultFontName Signika
skinparam defaultFontSize 11
skinparam classAttributeFontSize 10
skinparam classFontSize 12
skinparam packageFontSize 13

package "Core User Management" {
  class User {
    + userID: int
    + userName: string
    + email: string
    + password: string
    + role: string
    + phoneNumber: string
    + dateOfBirth: date
    + address: text
    + status: string
    --
    + findAll(): User[]
    + findById(userID): User
    + validateCredentials(): boolean
    + generateOTP(): string
    + verifyOTP(otp): boolean
    + create(userData): User
    + update(userID, userData): User
    + delete(userID): boolean
  }
}

package "Infrastructure Management" {
  class Station {
    + stationID: int
    + stationName: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Station[]
    + findById(stationID): Station
    + validateStationName(): boolean
    + checkDuplicateRoutes(): boolean
    + create(stationData): Station
    + update(stationID, stationData): Station
    + delete(stationID): boolean
  }

  class Track {
    + trackID: int
    + station1ID: int
    + station2ID: int
    + distance: decimal
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Track[]
    + findById(trackID): Track
    + validateStationDifference(): boolean
    + calculateDistance(): decimal
    + create(trackData): Track
    + update(trackID, trackData): Track
    + delete(trackID): boolean
  }
}

package "Fleet Management" {
  class Train {
    + trainID: int
    + trainName: string
    + trainType: string
    + coachTotal: int
    + status: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Train[]
    + findById(trainID): Train
    + syncCoachCount(): void
    + validateTrainName(): boolean
    + create(trainData): Train
    + update(trainID, trainData): Train
    + delete(trainID): boolean
  }

  class CoachType {
    + coach_typeID: int
    + type: string
    + price: decimal
    + capacity: int
    + description: text
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): CoachType[]
    + findById(typeId): CoachType
    + validatePricing(): boolean
    + calculateRevenue(): decimal
    + create(coachTypeData): CoachType
    + update(typeId, coachTypeData): CoachType
    + delete(typeId): boolean
  }

  class Coach {
    + coachID: int
    + coach_typeID: int
    + trainID: int
    + status: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Coach[]
    + findByCoachID(): Coach
    + findByTrainId(trainID): Coach[]
    + updateTrainCoachCount(): void
    + validateAssignment(): boolean
    + create(coachData): Coach
    + update(coachID, coachData): Coach
    + delete(coachID): boolean
    + syncAllTrainCoachCounts(): void
  }
}

package "Customer Management" {
  class Passenger {
    + passengerID: int
    + fullname: string
    + email: string
    + phoneNumber: string
    + status: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Passenger[]
    + findById(passengerID): Passenger
    + validateContactInfo(): boolean
    + formatPhoneNumber(): string
    + create(passengerData): Passenger
    + update(passengerID, passengerData): Passenger
    + delete(passengerID): boolean
  }

  class Booking {
    + bookingID: int
    + userID: int
    + passengerID: int
    + bookingDate: dateTime
    + totalPrice: decimal
    + status: string
    + paymentStatus: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Booking[]
    + findById(bookingID): Booking
    + findByUserId(userID): Booking[]
    + calculateTotalPrice(): decimal
    + validateBookingLimits(): boolean
    + processPayment(): boolean
    + create(bookingData): Booking
    + update(bookingID, bookingData): Booking
    + delete(bookingID): boolean
  }

  class Ticket {
    + ticketID: int
    + bookingID: int
    + trainID: int
    + coachID: int
    + departure_stationID: int
    + arrival_stationID: int
    + seatNumber: string
    + departureTime: dateTime
    + departureDate: date
    + ticketPrice: decimal
    + status: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Ticket[]
    + findById(ticketID): Ticket
    + findByBookingId(bookingID): Ticket[]
    + generateSeatNumber(): string
    + validateSeatAvailability(): boolean
    + calculatePrice(): decimal
    + create(ticketData): Ticket
    + update(ticketID, ticketData): Ticket
    + delete(ticketID): boolean
  }
}

package "Operations Management" {
  class Schedule {
    + scheduleID: int
    + trainID: int
    + start_stationID: int
    + end_stationID: int
    + departureTime: dateTime
    + arrivalTime: dateTime
    + scheduleStatus: string
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Schedule[]
    + findById(scheduleID): Schedule
    + findByTrainId(trainID): Schedule[]
    + findByStationId(stationID): Schedule[]
    + findBetweenStations(startStationID, endStationID): Schedule[]
    + validateStationDifference(): boolean
    + validateTimeSequence(): boolean
    + create(scheduleData): Schedule
    + update(scheduleID, scheduleData): Schedule
    + delete(scheduleID): boolean
  }

  class Journey {
    + journeyID: int
    + scheduleID: int
    + stationID: int
    + arrivalTime: dateTime
    + departureTime: dateTime
    + sequence: int
    + createdAt: timestamp
    + updatedAt: timestamp
    --
    + findAll(): Journey[]
    + findById(journeyID): Journey
    + findByScheduleId(scheduleID): Journey[]
    + validateJourneySequence(): boolean
    + calculateTravelTime(): int
    + create(journeyData): Journey
    + update(journeyID, journeyData): Journey
    + delete(journeyID): boolean
  }
}

' Enhanced Relationships with better labels
User ||--o{ Booking : "creates bookings"
Passenger ||--o{ Booking : "books travel"
Booking ||--o{ Ticket : "contains tickets"

Train ||--o{ Coach : "has coaches"
CoachType ||--o{ Coach : "defines type"
Coach ||--o{ Ticket : "assigns seat"

Station ||--o{ Track : "connects from"
Station ||--o{ Track : "connects to"
Station ||--o{ Schedule : "starts journey"
Station ||--o{ Schedule : "ends journey"
Station ||--o{ Journey : "stops at"

Train ||--o{ Schedule : "operates on"
Schedule ||--o{ Journey : "includes stops"

Ticket }o--|| Train : "travels on"
Ticket }o--|| Coach : "seat in"
Ticket }o--|| Station : "departs from"
Ticket }o--|| Station : "arrives at"

Track }o--|| Station : "connects station1"
Track }o--|| Station : "connects station2"

@enduml